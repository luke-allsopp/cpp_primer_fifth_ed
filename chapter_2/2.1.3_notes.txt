Literals:

auto assigned types when data fits certain formatting, when no type assigned. aka value 42 is interger literal based on its value, 0x14 is a hexadecimal literal based on its 0x notation. 

- Integer and Floating-Point Literals:

	A decimal literal has the smallest type of int, long, or long long (i.e., the first type in this list) in which the literal’s value fits.
 
	Octal and hexadecimal literals have the smallest type of int, unsigned int, long, unsigned long, long long, or unsigned long long in which the literal’s value fits. 
 
	There are no literals of type short.
 
	integer literals are stored as a signed type, however the neg sign is not stored as part of the literal, (is an operator that negates the operand)
 
 
	Floating-point literals include either a decimal point or an exponent specified using scientific notation. Using scientific notation, the exponent is indicated by either E or e:

		3.14159    3.14159E0    0.    0e0    .001

	By default, floating-point literals have type double.
	
	all default literal types can be overridden by using a suffix however. (table 2.2)
	
- Character and String Literals:
	
	'a' == character literal 
	"Hello World!" == string literal
	
	note that compiler appends a 'null' character (/0) to sting literals therefore actual size is one larger than apparent size
	
	Two string literals that appear adjacent to one another and that are separated only by spaces, tabs, or newlines are concatenated into a single literal. We use this form of literal when we need to write a literal that would otherwise be too large to fit comfortably on a single line:

		// multiline string literal

		std::cout << "a really, really long string literal "

					 "that spans two lines" << std::endl;
					 
- Escape Sequences:
	
	for characters that do not have an visible image, or control characters that are non-printable - escape sequence must be used to represent the character:
	
	newline            \n     horizontal tab      \t     alert (bell)       \a

	vertical tab       \v     backspace           \b     double quote  		\"

	backslash          \\     question mark       \?     single quote    	\'

	carriage return    \r     formfeed            \f

- Boolean and Pointer Literals:
 
	The words true and false are literals of type bool:

 
		bool test = false;
	
	the word nullptr is a pointer literal -> refer to 2.3.2