2.2.2. Variable Declarations and Definitions:

	To allow programs to be written in logical parts, C++ supports what is commonly known as separate compilation. Separate compilation lets us split our programs into several files, each of which can be compiled independently.

 
	When we separate a program into multiple files, we need a way to share code across those files. For example, code defined in one file may need to use a variable defined in another file. As a concrete example, consider std::cout and std::cin. These are objects defined somewhere in the standard library, yet our programs can use these objects.

		Tip
 
		Initialize every object of built-in type. It is not always necessary, but it is easier and safer to provide an initializer until you can be certain it is safe to omit the initializer.

	To support separate compilation, C++ distinguishes between declarations and definitions. 
	
	A declaration makes a name known to the program. A file that wants to use a name defined elsewhere includes a declaration for that name. 
	
	A definition creates the associated entity.
	
	A variable declaration specifies the type and name of a variable. 
	
	A variable definition is a declaration. 
	
	In addition to specifying the name and type, a definition also allocates storage and may provide the variable with an initial value.

	To obtain a declaration that is not also a definition, we add the extern keyword and may not provide an explicit initializer:

 		extern int i;   // declares but does not define i

		int j;          // declares and defines j

	Any declaration that includes an explicit initializer is a definition. We can provide an initializer on a variable defined as extern, but doing so overrides the extern. An extern that has an initializer is a definition:

		extern double pi = 3.1416; // definition

	It is an error to provide an initializer on an extern inside a function.
